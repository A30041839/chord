// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chord.proto

#ifndef PROTOBUF_chord_2eproto__INCLUDED
#define PROTOBUF_chord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace routeguide {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chord_2eproto();
void protobuf_AssignDesc_chord_2eproto();
void protobuf_ShutdownFile_chord_2eproto();

class node_t;
class node_t_dual;
class node_t_dual_node_t_int;
class node_t_int;
class node_t_node_t_int;
class void;

// ===================================================================

class void : public ::google::protobuf::Message {
 public:
  void();
  virtual ~void();

  void(const void& from);

  inline void& operator=(const void& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const void& default_instance();

  void Swap(void* other);

  // implements Message ----------------------------------------------

  inline void* New() const { return New(NULL); }

  void* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const void& from);
  void MergeFrom(const void& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(void* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routeguide.void)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static void* default_instance_;
};
// -------------------------------------------------------------------

class node_t : public ::google::protobuf::Message {
 public:
  node_t();
  virtual ~node_t();

  node_t(const node_t& from);

  inline node_t& operator=(const node_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t& default_instance();

  void Swap(node_t* other);

  // implements Message ----------------------------------------------

  inline node_t* New() const { return New(NULL); }

  node_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t& from);
  void MergeFrom(const node_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hostname = 1;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 portno = 3;
  void clear_portno();
  static const int kPortnoFieldNumber = 3;
  ::google::protobuf::int32 portno() const;
  void set_portno(::google::protobuf::int32 value);

  // optional string machine_name = 4;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 4;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // @@protoc_insertion_point(class_scope:routeguide.node_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  ::google::protobuf::int32 portno_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static node_t* default_instance_;
};
// -------------------------------------------------------------------

class node_t_dual : public ::google::protobuf::Message {
 public:
  node_t_dual();
  virtual ~node_t_dual();

  node_t_dual(const node_t_dual& from);

  inline node_t_dual& operator=(const node_t_dual& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t_dual& default_instance();

  void Swap(node_t_dual* other);

  // implements Message ----------------------------------------------

  inline node_t_dual* New() const { return New(NULL); }

  node_t_dual* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t_dual& from);
  void MergeFrom(const node_t_dual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t_dual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .routeguide.node_t first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::routeguide::node_t& first() const;
  ::routeguide::node_t* mutable_first();
  ::routeguide::node_t* release_first();
  void set_allocated_first(::routeguide::node_t* first);

  // optional .routeguide.node_t second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::routeguide::node_t& second() const;
  ::routeguide::node_t* mutable_second();
  ::routeguide::node_t* release_second();
  void set_allocated_second(::routeguide::node_t* second);

  // @@protoc_insertion_point(class_scope:routeguide.node_t_dual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::routeguide::node_t* first_;
  ::routeguide::node_t* second_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static node_t_dual* default_instance_;
};
// -------------------------------------------------------------------

class node_t_int : public ::google::protobuf::Message {
 public:
  node_t_int();
  virtual ~node_t_int();

  node_t_int(const node_t_int& from);

  inline node_t_int& operator=(const node_t_int& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t_int& default_instance();

  void Swap(node_t_int* other);

  // implements Message ----------------------------------------------

  inline node_t_int* New() const { return New(NULL); }

  node_t_int* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t_int& from);
  void MergeFrom(const node_t_int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t_int* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .routeguide.node_t node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::routeguide::node_t& node() const;
  ::routeguide::node_t* mutable_node();
  ::routeguide::node_t* release_node();
  void set_allocated_node(::routeguide::node_t* node);

  // optional int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:routeguide.node_t_int)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::routeguide::node_t* node_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static node_t_int* default_instance_;
};
// -------------------------------------------------------------------

class node_t_node_t_int : public ::google::protobuf::Message {
 public:
  node_t_node_t_int();
  virtual ~node_t_node_t_int();

  node_t_node_t_int(const node_t_node_t_int& from);

  inline node_t_node_t_int& operator=(const node_t_node_t_int& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t_node_t_int& default_instance();

  void Swap(node_t_node_t_int* other);

  // implements Message ----------------------------------------------

  inline node_t_node_t_int* New() const { return New(NULL); }

  node_t_node_t_int* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t_node_t_int& from);
  void MergeFrom(const node_t_node_t_int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t_node_t_int* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .routeguide.node_t node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::routeguide::node_t& node() const;
  ::routeguide::node_t* mutable_node();
  ::routeguide::node_t* release_node();
  void set_allocated_node(::routeguide::node_t* node);

  // optional .routeguide.node_t_int entry = 2;
  bool has_entry() const;
  void clear_entry();
  static const int kEntryFieldNumber = 2;
  const ::routeguide::node_t_int& entry() const;
  ::routeguide::node_t_int* mutable_entry();
  ::routeguide::node_t_int* release_entry();
  void set_allocated_entry(::routeguide::node_t_int* entry);

  // @@protoc_insertion_point(class_scope:routeguide.node_t_node_t_int)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::routeguide::node_t* node_;
  ::routeguide::node_t_int* entry_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static node_t_node_t_int* default_instance_;
};
// -------------------------------------------------------------------

class node_t_dual_node_t_int : public ::google::protobuf::Message {
 public:
  node_t_dual_node_t_int();
  virtual ~node_t_dual_node_t_int();

  node_t_dual_node_t_int(const node_t_dual_node_t_int& from);

  inline node_t_dual_node_t_int& operator=(const node_t_dual_node_t_int& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t_dual_node_t_int& default_instance();

  void Swap(node_t_dual_node_t_int* other);

  // implements Message ----------------------------------------------

  inline node_t_dual_node_t_int* New() const { return New(NULL); }

  node_t_dual_node_t_int* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t_dual_node_t_int& from);
  void MergeFrom(const node_t_dual_node_t_int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t_dual_node_t_int* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .routeguide.node_t dest_node = 1;
  bool has_dest_node() const;
  void clear_dest_node();
  static const int kDestNodeFieldNumber = 1;
  const ::routeguide::node_t& dest_node() const;
  ::routeguide::node_t* mutable_dest_node();
  ::routeguide::node_t* release_dest_node();
  void set_allocated_dest_node(::routeguide::node_t* dest_node);

  // optional .routeguide.node_t node_param1 = 2;
  bool has_node_param1() const;
  void clear_node_param1();
  static const int kNodeParam1FieldNumber = 2;
  const ::routeguide::node_t& node_param1() const;
  ::routeguide::node_t* mutable_node_param1();
  ::routeguide::node_t* release_node_param1();
  void set_allocated_node_param1(::routeguide::node_t* node_param1);

  // optional .routeguide.node_t node_param2 = 3;
  bool has_node_param2() const;
  void clear_node_param2();
  static const int kNodeParam2FieldNumber = 3;
  const ::routeguide::node_t& node_param2() const;
  ::routeguide::node_t* mutable_node_param2();
  ::routeguide::node_t* release_node_param2();
  void set_allocated_node_param2(::routeguide::node_t* node_param2);

  // optional int64 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:routeguide.node_t_dual_node_t_int)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::routeguide::node_t* dest_node_;
  ::routeguide::node_t* node_param1_;
  ::routeguide::node_t* node_param2_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chord_2eproto();
  friend void protobuf_AssignDesc_chord_2eproto();
  friend void protobuf_ShutdownFile_chord_2eproto();

  void InitAsDefaultInstance();
  static node_t_dual_node_t_int* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// void

// -------------------------------------------------------------------

// node_t

// optional string hostname = 1;
inline void node_t::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_t::hostname() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_t::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.node_t.hostname)
}
inline void node_t::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.node_t.hostname)
}
inline void node_t::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.node_t.hostname)
}
inline ::std::string* node_t::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.node_t.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_t::release_hostname() {
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_t::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t.hostname)
}

// optional int64 id = 2;
inline void node_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 node_t::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.id)
  return id_;
}
inline void node_t::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t.id)
}

// optional int32 portno = 3;
inline void node_t::clear_portno() {
  portno_ = 0;
}
inline ::google::protobuf::int32 node_t::portno() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.portno)
  return portno_;
}
inline void node_t::set_portno(::google::protobuf::int32 value) {
  
  portno_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t.portno)
}

// optional string machine_name = 4;
inline void node_t::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_t::machine_name() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.machine_name)
  return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_t::set_machine_name(const ::std::string& value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.node_t.machine_name)
}
inline void node_t::set_machine_name(const char* value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.node_t.machine_name)
}
inline void node_t::set_machine_name(const char* value, size_t size) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.node_t.machine_name)
}
inline ::std::string* node_t::mutable_machine_name() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.node_t.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_t::release_machine_name() {
  
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_t::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    
  } else {
    
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t.machine_name)
}

// -------------------------------------------------------------------

// node_t_dual

// optional .routeguide.node_t first = 1;
inline bool node_t_dual::has_first() const {
  return !_is_default_instance_ && first_ != NULL;
}
inline void node_t_dual::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
inline const ::routeguide::node_t& node_t_dual::first() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual.first)
  return first_ != NULL ? *first_ : *default_instance_->first_;
}
inline ::routeguide::node_t* node_t_dual::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual.first)
  return first_;
}
inline ::routeguide::node_t* node_t_dual::release_first() {
  
  ::routeguide::node_t* temp = first_;
  first_ = NULL;
  return temp;
}
inline void node_t_dual::set_allocated_first(::routeguide::node_t* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual.first)
}

// optional .routeguide.node_t second = 2;
inline bool node_t_dual::has_second() const {
  return !_is_default_instance_ && second_ != NULL;
}
inline void node_t_dual::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::routeguide::node_t& node_t_dual::second() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual.second)
  return second_ != NULL ? *second_ : *default_instance_->second_;
}
inline ::routeguide::node_t* node_t_dual::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual.second)
  return second_;
}
inline ::routeguide::node_t* node_t_dual::release_second() {
  
  ::routeguide::node_t* temp = second_;
  second_ = NULL;
  return temp;
}
inline void node_t_dual::set_allocated_second(::routeguide::node_t* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual.second)
}

// -------------------------------------------------------------------

// node_t_int

// optional .routeguide.node_t node = 1;
inline bool node_t_int::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
inline void node_t_int::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::routeguide::node_t& node_t_int::node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_int.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::routeguide::node_t* node_t_int::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_int.node)
  return node_;
}
inline ::routeguide::node_t* node_t_int::release_node() {
  
  ::routeguide::node_t* temp = node_;
  node_ = NULL;
  return temp;
}
inline void node_t_int::set_allocated_node(::routeguide::node_t* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_int.node)
}

// optional int64 id = 2;
inline void node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 node_t_int::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_int.id)
  return id_;
}
inline void node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t_int.id)
}

// -------------------------------------------------------------------

// node_t_node_t_int

// optional .routeguide.node_t node = 1;
inline bool node_t_node_t_int::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
inline void node_t_node_t_int::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::routeguide::node_t& node_t_node_t_int::node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_node_t_int.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::routeguide::node_t* node_t_node_t_int::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_node_t_int.node)
  return node_;
}
inline ::routeguide::node_t* node_t_node_t_int::release_node() {
  
  ::routeguide::node_t* temp = node_;
  node_ = NULL;
  return temp;
}
inline void node_t_node_t_int::set_allocated_node(::routeguide::node_t* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_node_t_int.node)
}

// optional .routeguide.node_t_int entry = 2;
inline bool node_t_node_t_int::has_entry() const {
  return !_is_default_instance_ && entry_ != NULL;
}
inline void node_t_node_t_int::clear_entry() {
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) delete entry_;
  entry_ = NULL;
}
inline const ::routeguide::node_t_int& node_t_node_t_int::entry() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_node_t_int.entry)
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
inline ::routeguide::node_t_int* node_t_node_t_int::mutable_entry() {
  
  if (entry_ == NULL) {
    entry_ = new ::routeguide::node_t_int;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_node_t_int.entry)
  return entry_;
}
inline ::routeguide::node_t_int* node_t_node_t_int::release_entry() {
  
  ::routeguide::node_t_int* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline void node_t_node_t_int::set_allocated_entry(::routeguide::node_t_int* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_node_t_int.entry)
}

// -------------------------------------------------------------------

// node_t_dual_node_t_int

// optional .routeguide.node_t dest_node = 1;
inline bool node_t_dual_node_t_int::has_dest_node() const {
  return !_is_default_instance_ && dest_node_ != NULL;
}
inline void node_t_dual_node_t_int::clear_dest_node() {
  if (GetArenaNoVirtual() == NULL && dest_node_ != NULL) delete dest_node_;
  dest_node_ = NULL;
}
inline const ::routeguide::node_t& node_t_dual_node_t_int::dest_node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.dest_node)
  return dest_node_ != NULL ? *dest_node_ : *default_instance_->dest_node_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::mutable_dest_node() {
  
  if (dest_node_ == NULL) {
    dest_node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.dest_node)
  return dest_node_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::release_dest_node() {
  
  ::routeguide::node_t* temp = dest_node_;
  dest_node_ = NULL;
  return temp;
}
inline void node_t_dual_node_t_int::set_allocated_dest_node(::routeguide::node_t* dest_node) {
  delete dest_node_;
  dest_node_ = dest_node;
  if (dest_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.dest_node)
}

// optional .routeguide.node_t node_param1 = 2;
inline bool node_t_dual_node_t_int::has_node_param1() const {
  return !_is_default_instance_ && node_param1_ != NULL;
}
inline void node_t_dual_node_t_int::clear_node_param1() {
  if (GetArenaNoVirtual() == NULL && node_param1_ != NULL) delete node_param1_;
  node_param1_ = NULL;
}
inline const ::routeguide::node_t& node_t_dual_node_t_int::node_param1() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.node_param1)
  return node_param1_ != NULL ? *node_param1_ : *default_instance_->node_param1_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::mutable_node_param1() {
  
  if (node_param1_ == NULL) {
    node_param1_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.node_param1)
  return node_param1_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::release_node_param1() {
  
  ::routeguide::node_t* temp = node_param1_;
  node_param1_ = NULL;
  return temp;
}
inline void node_t_dual_node_t_int::set_allocated_node_param1(::routeguide::node_t* node_param1) {
  delete node_param1_;
  node_param1_ = node_param1;
  if (node_param1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.node_param1)
}

// optional .routeguide.node_t node_param2 = 3;
inline bool node_t_dual_node_t_int::has_node_param2() const {
  return !_is_default_instance_ && node_param2_ != NULL;
}
inline void node_t_dual_node_t_int::clear_node_param2() {
  if (GetArenaNoVirtual() == NULL && node_param2_ != NULL) delete node_param2_;
  node_param2_ = NULL;
}
inline const ::routeguide::node_t& node_t_dual_node_t_int::node_param2() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.node_param2)
  return node_param2_ != NULL ? *node_param2_ : *default_instance_->node_param2_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::mutable_node_param2() {
  
  if (node_param2_ == NULL) {
    node_param2_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.node_param2)
  return node_param2_;
}
inline ::routeguide::node_t* node_t_dual_node_t_int::release_node_param2() {
  
  ::routeguide::node_t* temp = node_param2_;
  node_param2_ = NULL;
  return temp;
}
inline void node_t_dual_node_t_int::set_allocated_node_param2(::routeguide::node_t* node_param2) {
  delete node_param2_;
  node_param2_ = node_param2;
  if (node_param2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.node_param2)
}

// optional int64 id = 4;
inline void node_t_dual_node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 node_t_dual_node_t_int::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.id)
  return id_;
}
inline void node_t_dual_node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t_dual_node_t_int.id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routeguide

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chord_2eproto__INCLUDED
