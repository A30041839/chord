// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: grpc/chord.proto
// Original file comments:
// protocol for chord internal message
//
#ifndef GRPC_grpc_2fchord_2eproto__INCLUDED
#define GRPC_grpc_2fchord_2eproto__INCLUDED

#include "grpc/chord.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace routeguide {

// Interface exported by the server.
class RouteGuide GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncgetRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncgetRemotePredecessorRaw(context, request, cq));
    }
    virtual ::grpc::Status setRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::routeguide::void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::void>> AsyncsetRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::void>>(AsyncsetRemotePredecessorRaw(context, request, cq));
    }
    virtual ::grpc::Status getRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncgetRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncgetRemoteSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status findRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncfindRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncfindRemoteSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status findRemoteClosestPrecedingFinger(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncfindRemoteClosestPrecedingFinger(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncfindRemoteClosestPrecedingFingerRaw(context, request, cq));
    }
    virtual ::grpc::Status updateRemoteFingerTable(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncupdateRemoteFingerTable(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncupdateRemoteFingerTableRaw(context, request, cq));
    }
    virtual ::grpc::Status removeRemoteNode(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::routeguide::node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>> AsyncremoveRemoteNode(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>>(AsyncremoveRemoteNodeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncgetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::void>* AsyncsetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncgetRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncfindRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncfindRemoteClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncupdateRemoteFingerTableRaw(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::node_t>* AsyncremoveRemoteNodeRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncgetRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncgetRemotePredecessorRaw(context, request, cq));
    }
    ::grpc::Status setRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::routeguide::void* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::void>> AsyncsetRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::void>>(AsyncsetRemotePredecessorRaw(context, request, cq));
    }
    ::grpc::Status getRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncgetRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncgetRemoteSuccessorRaw(context, request, cq));
    }
    ::grpc::Status findRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncfindRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncfindRemoteSuccessorRaw(context, request, cq));
    }
    ::grpc::Status findRemoteClosestPrecedingFinger(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncfindRemoteClosestPrecedingFinger(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncfindRemoteClosestPrecedingFingerRaw(context, request, cq));
    }
    ::grpc::Status updateRemoteFingerTable(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncupdateRemoteFingerTable(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncupdateRemoteFingerTableRaw(context, request, cq));
    }
    ::grpc::Status removeRemoteNode(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::routeguide::node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>> AsyncremoveRemoteNode(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>>(AsyncremoveRemoteNodeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncgetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::void>* AsyncsetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncgetRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncfindRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncfindRemoteClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncupdateRemoteFingerTableRaw(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* AsyncremoveRemoteNodeRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_getRemotePredecessor_;
    const ::grpc::RpcMethod rpcmethod_setRemotePredecessor_;
    const ::grpc::RpcMethod rpcmethod_getRemoteSuccessor_;
    const ::grpc::RpcMethod rpcmethod_findRemoteSuccessor_;
    const ::grpc::RpcMethod rpcmethod_findRemoteClosestPrecedingFinger_;
    const ::grpc::RpcMethod rpcmethod_updateRemoteFingerTable_;
    const ::grpc::RpcMethod rpcmethod_removeRemoteNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response);
    virtual ::grpc::Status setRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t_dual* request, ::routeguide::void* response);
    virtual ::grpc::Status getRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response);
    virtual ::grpc::Status findRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response);
    virtual ::grpc::Status findRemoteClosestPrecedingFinger(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response);
    virtual ::grpc::Status updateRemoteFingerTable(::grpc::ServerContext* context, const ::routeguide::node_t_node_t_int* request, ::routeguide::node_t* response);
    virtual ::grpc::Status removeRemoteNode(::grpc::ServerContext* context, const ::routeguide::node_t_dual_node_t_int* request, ::routeguide::node_t* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getRemotePredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRemotePredecessor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getRemotePredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRemotePredecessor(::grpc::ServerContext* context, ::routeguide::node_t* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setRemotePredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setRemotePredecessor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setRemotePredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t_dual* request, ::routeguide::void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetRemotePredecessor(::grpc::ServerContext* context, ::routeguide::node_t_dual* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRemoteSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRemoteSuccessor() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getRemoteSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRemoteSuccessor(::grpc::ServerContext* context, ::routeguide::node_t* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findRemoteSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_findRemoteSuccessor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_findRemoteSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindRemoteSuccessor(::grpc::ServerContext* context, ::routeguide::node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findRemoteClosestPrecedingFinger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_findRemoteClosestPrecedingFinger() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_findRemoteClosestPrecedingFinger() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRemoteClosestPrecedingFinger(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindRemoteClosestPrecedingFinger(::grpc::ServerContext* context, ::routeguide::node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateRemoteFingerTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateRemoteFingerTable() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_updateRemoteFingerTable() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRemoteFingerTable(::grpc::ServerContext* context, const ::routeguide::node_t_node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateRemoteFingerTable(::grpc::ServerContext* context, ::routeguide::node_t_node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeRemoteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_removeRemoteNode() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_removeRemoteNode() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeRemoteNode(::grpc::ServerContext* context, const ::routeguide::node_t_dual_node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveRemoteNode(::grpc::ServerContext* context, ::routeguide::node_t_dual_node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getRemotePredecessor<WithAsyncMethod_setRemotePredecessor<WithAsyncMethod_getRemoteSuccessor<WithAsyncMethod_findRemoteSuccessor<WithAsyncMethod_findRemoteClosestPrecedingFinger<WithAsyncMethod_updateRemoteFingerTable<WithAsyncMethod_removeRemoteNode<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getRemotePredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRemotePredecessor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getRemotePredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setRemotePredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setRemotePredecessor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setRemotePredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t_dual* request, ::routeguide::void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRemoteSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRemoteSuccessor() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getRemoteSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findRemoteSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_findRemoteSuccessor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_findRemoteSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findRemoteClosestPrecedingFinger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_findRemoteClosestPrecedingFinger() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_findRemoteClosestPrecedingFinger() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRemoteClosestPrecedingFinger(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateRemoteFingerTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateRemoteFingerTable() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_updateRemoteFingerTable() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRemoteFingerTable(::grpc::ServerContext* context, const ::routeguide::node_t_node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeRemoteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_removeRemoteNode() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_removeRemoteNode() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeRemoteNode(::grpc::ServerContext* context, const ::routeguide::node_t_dual_node_t_int* request, ::routeguide::node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace routeguide


#endif  // GRPC_grpc_2fchord_2eproto__INCLUDED
