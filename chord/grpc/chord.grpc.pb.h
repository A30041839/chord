// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: chord.proto
// Original file comments:
// protocol for chord internal message
//
#ifndef GRPC_chord_2eproto__INCLUDED
#define GRPC_chord_2eproto__INCLUDED

#include "chord.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chord {

// Interface exported by the server.
class Messager GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getPredecessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>> AsyncgetPredecessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>>(AsyncgetPredecessorRaw(context, request, cq));
    }
    virtual ::grpc::Status setPredecessor(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::chord::m_void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>> AsyncsetPredecessor(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>>(AsyncsetPredecessorRaw(context, request, cq));
    }
    virtual ::grpc::Status getSuccessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>> AsyncgetSuccessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>>(AsyncgetSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status findSuccessor(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>> AsyncfindSuccessor(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>>(AsyncfindSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status findClosestPrecedingFinger(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>> AsyncfindClosestPrecedingFinger(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>>(AsyncfindClosestPrecedingFingerRaw(context, request, cq));
    }
    virtual ::grpc::Status updateFingerTable(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::chord::m_void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>> AsyncupdateFingerTable(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>>(AsyncupdateFingerTableRaw(context, request, cq));
    }
    virtual ::grpc::Status removeNode(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::chord::m_void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>> AsyncremoveNode(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>>(AsyncremoveNodeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>* AsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>* AsyncsetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>* AsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>* AsyncfindSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_node_t>* AsyncfindClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>* AsyncupdateFingerTableRaw(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chord::m_void>* AsyncremoveNodeRaw(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getPredecessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>> AsyncgetPredecessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>>(AsyncgetPredecessorRaw(context, request, cq));
    }
    ::grpc::Status setPredecessor(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::chord::m_void* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>> AsyncsetPredecessor(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>>(AsyncsetPredecessorRaw(context, request, cq));
    }
    ::grpc::Status getSuccessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>> AsyncgetSuccessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>>(AsyncgetSuccessorRaw(context, request, cq));
    }
    ::grpc::Status findSuccessor(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>> AsyncfindSuccessor(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>>(AsyncfindSuccessorRaw(context, request, cq));
    }
    ::grpc::Status findClosestPrecedingFinger(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>> AsyncfindClosestPrecedingFinger(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>>(AsyncfindClosestPrecedingFingerRaw(context, request, cq));
    }
    ::grpc::Status updateFingerTable(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::chord::m_void* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>> AsyncupdateFingerTable(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>>(AsyncupdateFingerTableRaw(context, request, cq));
    }
    ::grpc::Status removeNode(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::chord::m_void* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>> AsyncremoveNode(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chord::m_void>>(AsyncremoveNodeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* AsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_void>* AsyncsetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* AsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* AsyncfindSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* AsyncfindClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_void>* AsyncupdateFingerTableRaw(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chord::m_void>* AsyncremoveNodeRaw(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_getPredecessor_;
    const ::grpc::RpcMethod rpcmethod_setPredecessor_;
    const ::grpc::RpcMethod rpcmethod_getSuccessor_;
    const ::grpc::RpcMethod rpcmethod_findSuccessor_;
    const ::grpc::RpcMethod rpcmethod_findClosestPrecedingFinger_;
    const ::grpc::RpcMethod rpcmethod_updateFingerTable_;
    const ::grpc::RpcMethod rpcmethod_removeNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response);
    virtual ::grpc::Status setPredecessor(::grpc::ServerContext* context, const ::chord::m_node_t* request, ::chord::m_void* response);
    virtual ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response);
    virtual ::grpc::Status findSuccessor(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response);
    virtual ::grpc::Status findClosestPrecedingFinger(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response);
    virtual ::grpc::Status updateFingerTable(::grpc::ServerContext* context, const ::chord::m_node_t_int* request, ::chord::m_void* response);
    virtual ::grpc::Status removeNode(::grpc::ServerContext* context, const ::chord::m_node_t_node_t_int* request, ::chord::m_void* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getPredecessor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getPredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPredecessor(::grpc::ServerContext* context, ::chord::m_void* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setPredecessor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setPredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPredecessor(::grpc::ServerContext* context, const ::chord::m_node_t* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetPredecessor(::grpc::ServerContext* context, ::chord::m_node_t* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getSuccessor() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSuccessor(::grpc::ServerContext* context, ::chord::m_void* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_findSuccessor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_findSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findSuccessor(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindSuccessor(::grpc::ServerContext* context, ::chord::m_int* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findClosestPrecedingFinger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_findClosestPrecedingFinger() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_findClosestPrecedingFinger() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findClosestPrecedingFinger(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindClosestPrecedingFinger(::grpc::ServerContext* context, ::chord::m_int* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_node_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateFingerTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateFingerTable() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_updateFingerTable() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFingerTable(::grpc::ServerContext* context, const ::chord::m_node_t_int* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateFingerTable(::grpc::ServerContext* context, ::chord::m_node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_removeNode() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_removeNode() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeNode(::grpc::ServerContext* context, const ::chord::m_node_t_node_t_int* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveNode(::grpc::ServerContext* context, ::chord::m_node_t_node_t_int* request, ::grpc::ServerAsyncResponseWriter< ::chord::m_void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getPredecessor<WithAsyncMethod_setPredecessor<WithAsyncMethod_getSuccessor<WithAsyncMethod_findSuccessor<WithAsyncMethod_findClosestPrecedingFinger<WithAsyncMethod_updateFingerTable<WithAsyncMethod_removeNode<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getPredecessor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getPredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setPredecessor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setPredecessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPredecessor(::grpc::ServerContext* context, const ::chord::m_node_t* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getSuccessor() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_findSuccessor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_findSuccessor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findSuccessor(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findClosestPrecedingFinger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_findClosestPrecedingFinger() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_findClosestPrecedingFinger() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findClosestPrecedingFinger(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateFingerTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateFingerTable() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_updateFingerTable() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFingerTable(::grpc::ServerContext* context, const ::chord::m_node_t_int* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_removeNode() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_removeNode() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeNode(::grpc::ServerContext* context, const ::chord::m_node_t_node_t_int* request, ::chord::m_void* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace chord


#endif  // GRPC_chord_2eproto__INCLUDED
