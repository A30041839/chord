// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: chord.proto

#include "chord.pb.h"
#include "chord.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace chord {

static const char* Messager_method_names[] = {
  "/chord.Messager/getPredecessor",
  "/chord.Messager/setPredecessor",
  "/chord.Messager/getSuccessor",
  "/chord.Messager/findSuccessor",
  "/chord.Messager/findClosestPrecedingFinger",
  "/chord.Messager/updateFingerTable",
  "/chord.Messager/removeNode",
};

std::unique_ptr< Messager::Stub> Messager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Messager::Stub> stub(new Messager::Stub(channel));
  return stub;
}

Messager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getPredecessor_(Messager_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPredecessor_(Messager_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSuccessor_(Messager_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findSuccessor_(Messager_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findClosestPrecedingFinger_(Messager_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateFingerTable_(Messager_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeNode_(Messager_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Messager::Stub::getPredecessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getPredecessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* Messager::Stub::AsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>(channel_.get(), cq, rpcmethod_getPredecessor_, context, request);
}

::grpc::Status Messager::Stub::setPredecessor(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::chord::m_void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_setPredecessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_void>* Messager::Stub::AsyncsetPredecessorRaw(::grpc::ClientContext* context, const ::chord::m_node_t& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_void>(channel_.get(), cq, rpcmethod_setPredecessor_, context, request);
}

::grpc::Status Messager::Stub::getSuccessor(::grpc::ClientContext* context, const ::chord::m_void& request, ::chord::m_node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getSuccessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* Messager::Stub::AsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_void& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>(channel_.get(), cq, rpcmethod_getSuccessor_, context, request);
}

::grpc::Status Messager::Stub::findSuccessor(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_findSuccessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* Messager::Stub::AsyncfindSuccessorRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>(channel_.get(), cq, rpcmethod_findSuccessor_, context, request);
}

::grpc::Status Messager::Stub::findClosestPrecedingFinger(::grpc::ClientContext* context, const ::chord::m_int& request, ::chord::m_node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_findClosestPrecedingFinger_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_node_t>* Messager::Stub::AsyncfindClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::chord::m_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_node_t>(channel_.get(), cq, rpcmethod_findClosestPrecedingFinger_, context, request);
}

::grpc::Status Messager::Stub::updateFingerTable(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::chord::m_void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_updateFingerTable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_void>* Messager::Stub::AsyncupdateFingerTableRaw(::grpc::ClientContext* context, const ::chord::m_node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_void>(channel_.get(), cq, rpcmethod_updateFingerTable_, context, request);
}

::grpc::Status Messager::Stub::removeNode(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::chord::m_void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_removeNode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::chord::m_void>* Messager::Stub::AsyncremoveNodeRaw(::grpc::ClientContext* context, const ::chord::m_node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::chord::m_void>(channel_.get(), cq, rpcmethod_removeNode_, context, request);
}

Messager::Service::Service() {
  (void)Messager_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_void, ::chord::m_node_t>(
          std::mem_fn(&Messager::Service::getPredecessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_node_t, ::chord::m_void>(
          std::mem_fn(&Messager::Service::setPredecessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_void, ::chord::m_node_t>(
          std::mem_fn(&Messager::Service::getSuccessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_int, ::chord::m_node_t>(
          std::mem_fn(&Messager::Service::findSuccessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_int, ::chord::m_node_t>(
          std::mem_fn(&Messager::Service::findClosestPrecedingFinger), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_node_t_int, ::chord::m_void>(
          std::mem_fn(&Messager::Service::updateFingerTable), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messager_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messager::Service, ::chord::m_node_t_node_t_int, ::chord::m_void>(
          std::mem_fn(&Messager::Service::removeNode), this)));
}

Messager::Service::~Service() {
}

::grpc::Status Messager::Service::getPredecessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::setPredecessor(::grpc::ServerContext* context, const ::chord::m_node_t* request, ::chord::m_void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::getSuccessor(::grpc::ServerContext* context, const ::chord::m_void* request, ::chord::m_node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::findSuccessor(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::findClosestPrecedingFinger(::grpc::ServerContext* context, const ::chord::m_int* request, ::chord::m_node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::updateFingerTable(::grpc::ServerContext* context, const ::chord::m_node_t_int* request, ::chord::m_void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messager::Service::removeNode(::grpc::ServerContext* context, const ::chord::m_node_t_node_t_int* request, ::chord::m_void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chord

