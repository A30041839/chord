// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: grpc/chord.proto

#include "grpc/chord.pb.h"
#include "grpc/chord.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace routeguide {

static const char* RouteGuide_method_names[] = {
  "/routeguide.RouteGuide/getRemotePredecessor",
  "/routeguide.RouteGuide/setRemotePredecessor",
  "/routeguide.RouteGuide/getRemoteSuccessor",
  "/routeguide.RouteGuide/findRemoteSuccessor",
  "/routeguide.RouteGuide/findRemoteClosestPrecedingFinger",
  "/routeguide.RouteGuide/updateRemoteFingerTable",
  "/routeguide.RouteGuide/removeRemoteNode",
};

std::unique_ptr< RouteGuide::Stub> RouteGuide::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< RouteGuide::Stub> stub(new RouteGuide::Stub(channel));
  return stub;
}

RouteGuide::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getRemotePredecessor_(RouteGuide_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRemotePredecessor_(RouteGuide_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRemoteSuccessor_(RouteGuide_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findRemoteSuccessor_(RouteGuide_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findRemoteClosestPrecedingFinger_(RouteGuide_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateRemoteFingerTable_(RouteGuide_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeRemoteNode_(RouteGuide_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RouteGuide::Stub::getRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getRemotePredecessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncgetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_getRemotePredecessor_, context, request);
}

::grpc::Status RouteGuide::Stub::setRemotePredecessor(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::routeguide::void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_setRemotePredecessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::void>* RouteGuide::Stub::AsyncsetRemotePredecessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::void>(channel_.get(), cq, rpcmethod_setRemotePredecessor_, context, request);
}

::grpc::Status RouteGuide::Stub::getRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_getRemoteSuccessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncgetRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_getRemoteSuccessor_, context, request);
}

::grpc::Status RouteGuide::Stub::findRemoteSuccessor(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_findRemoteSuccessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncfindRemoteSuccessorRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_findRemoteSuccessor_, context, request);
}

::grpc::Status RouteGuide::Stub::findRemoteClosestPrecedingFinger(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_findRemoteClosestPrecedingFinger_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncfindRemoteClosestPrecedingFingerRaw(::grpc::ClientContext* context, const ::routeguide::node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_findRemoteClosestPrecedingFinger_, context, request);
}

::grpc::Status RouteGuide::Stub::updateRemoteFingerTable(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_updateRemoteFingerTable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncupdateRemoteFingerTableRaw(::grpc::ClientContext* context, const ::routeguide::node_t_node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_updateRemoteFingerTable_, context, request);
}

::grpc::Status RouteGuide::Stub::removeRemoteNode(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::routeguide::node_t* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_removeRemoteNode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::node_t>* RouteGuide::Stub::AsyncremoveRemoteNodeRaw(::grpc::ClientContext* context, const ::routeguide::node_t_dual_node_t_int& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::routeguide::node_t>(channel_.get(), cq, rpcmethod_removeRemoteNode_, context, request);
}

RouteGuide::Service::Service() {
  (void)RouteGuide_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::getRemotePredecessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t_dual, ::routeguide::void>(
          std::mem_fn(&RouteGuide::Service::setRemotePredecessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::getRemoteSuccessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t_int, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::findRemoteSuccessor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t_int, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::findRemoteClosestPrecedingFinger), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t_node_t_int, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::updateRemoteFingerTable), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      RouteGuide_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< RouteGuide::Service, ::routeguide::node_t_dual_node_t_int, ::routeguide::node_t>(
          std::mem_fn(&RouteGuide::Service::removeRemoteNode), this)));
}

RouteGuide::Service::~Service() {
}

::grpc::Status RouteGuide::Service::getRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::setRemotePredecessor(::grpc::ServerContext* context, const ::routeguide::node_t_dual* request, ::routeguide::void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::getRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::findRemoteSuccessor(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::findRemoteClosestPrecedingFinger(::grpc::ServerContext* context, const ::routeguide::node_t_int* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::updateRemoteFingerTable(::grpc::ServerContext* context, const ::routeguide::node_t_node_t_int* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::removeRemoteNode(::grpc::ServerContext* context, const ::routeguide::node_t_dual_node_t_int* request, ::routeguide::node_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace routeguide

