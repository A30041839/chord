// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chord {

namespace {

const ::google::protobuf::Descriptor* m_void_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_void_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_int_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_node_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_node_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_node_t_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_node_t_int_reflection_ = NULL;
const ::google::protobuf::Descriptor* m_node_t_node_t_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  m_node_t_node_t_int_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chord_2eproto() {
  protobuf_AddDesc_chord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chord.proto");
  GOOGLE_CHECK(file != NULL);
  m_void_descriptor_ = file->message_type(0);
  static const int m_void_offsets_[1] = {
  };
  m_void_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      m_void_descriptor_,
      m_void::default_instance_,
      m_void_offsets_,
      -1,
      -1,
      -1,
      sizeof(m_void),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_void, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_void, _is_default_instance_));
  m_int_descriptor_ = file->message_type(1);
  static const int m_int_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_int, id_),
  };
  m_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      m_int_descriptor_,
      m_int::default_instance_,
      m_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(m_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_int, _is_default_instance_));
  m_node_t_descriptor_ = file->message_type(2);
  static const int m_node_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, portno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, machine_name_),
  };
  m_node_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      m_node_t_descriptor_,
      m_node_t::default_instance_,
      m_node_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(m_node_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t, _is_default_instance_));
  m_node_t_int_descriptor_ = file->message_type(3);
  static const int m_node_t_int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_int, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_int, id_),
  };
  m_node_t_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      m_node_t_int_descriptor_,
      m_node_t_int::default_instance_,
      m_node_t_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(m_node_t_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_int, _is_default_instance_));
  m_node_t_node_t_int_descriptor_ = file->message_type(4);
  static const int m_node_t_node_t_int_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_node_t_int, node_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_node_t_int, node_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_node_t_int, id_),
  };
  m_node_t_node_t_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      m_node_t_node_t_int_descriptor_,
      m_node_t_node_t_int::default_instance_,
      m_node_t_node_t_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(m_node_t_node_t_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_node_t_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(m_node_t_node_t_int, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      m_void_descriptor_, &m_void::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      m_int_descriptor_, &m_int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      m_node_t_descriptor_, &m_node_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      m_node_t_int_descriptor_, &m_node_t_int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      m_node_t_node_t_int_descriptor_, &m_node_t_node_t_int::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chord_2eproto() {
  delete m_void::default_instance_;
  delete m_void_reflection_;
  delete m_int::default_instance_;
  delete m_int_reflection_;
  delete m_node_t::default_instance_;
  delete m_node_t_reflection_;
  delete m_node_t_int::default_instance_;
  delete m_node_t_int_reflection_;
  delete m_node_t_node_t_int::default_instance_;
  delete m_node_t_node_t_int_reflection_;
}

void protobuf_AddDesc_chord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013chord.proto\022\005chord\"\010\n\006m_void\"\023\n\005m_int\022"
    "\n\n\002id\030\001 \001(\003\"N\n\010m_node_t\022\020\n\010hostname\030\001 \001("
    "\t\022\n\n\002id\030\002 \001(\003\022\016\n\006portno\030\003 \001(\005\022\024\n\014machine"
    "_name\030\004 \001(\t\"9\n\014m_node_t_int\022\035\n\004node\030\001 \001("
    "\0132\017.chord.m_node_t\022\n\n\002id\030\002 \001(\003\"c\n\023m_node"
    "_t_node_t_int\022\037\n\006node_1\030\001 \001(\0132\017.chord.m_"
    "node_t\022\037\n\006node_2\030\002 \001(\0132\017.chord.m_node_t\022"
    "\n\n\002id\030\003 \001(\0032\213\003\n\010Messager\0222\n\016getPredecess"
    "or\022\r.chord.m_void\032\017.chord.m_node_t\"\000\0222\n\016"
    "setPredecessor\022\017.chord.m_node_t\032\r.chord."
    "m_void\"\000\0220\n\014getSuccessor\022\r.chord.m_void\032"
    "\017.chord.m_node_t\"\000\0220\n\rfindSuccessor\022\014.ch"
    "ord.m_int\032\017.chord.m_node_t\"\000\022=\n\032findClos"
    "estPrecedingFinger\022\014.chord.m_int\032\017.chord"
    ".m_node_t\"\000\0229\n\021updateFingerTable\022\023.chord"
    ".m_node_t_int\032\r.chord.m_void\"\000\0229\n\nremove"
    "Node\022\032.chord.m_node_t_node_t_int\032\r.chord"
    ".m_void\"\000B6\n\033io.grpc.examples.routeguide"
    "B\017RouteGuideProtoP\001\242\002\003RTGb\006proto3", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chord.proto", &protobuf_RegisterTypes);
  m_void::default_instance_ = new m_void();
  m_int::default_instance_ = new m_int();
  m_node_t::default_instance_ = new m_node_t();
  m_node_t_int::default_instance_ = new m_node_t_int();
  m_node_t_node_t_int::default_instance_ = new m_node_t_node_t_int();
  m_void::default_instance_->InitAsDefaultInstance();
  m_int::default_instance_->InitAsDefaultInstance();
  m_node_t::default_instance_->InitAsDefaultInstance();
  m_node_t_int::default_instance_->InitAsDefaultInstance();
  m_node_t_node_t_int::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chord_2eproto {
  StaticDescriptorInitializer_chord_2eproto() {
    protobuf_AddDesc_chord_2eproto();
  }
} static_descriptor_initializer_chord_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

m_void::m_void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.m_void)
}

void m_void::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

m_void::m_void(const m_void& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chord.m_void)
}

void m_void::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

m_void::~m_void() {
  // @@protoc_insertion_point(destructor:chord.m_void)
  SharedDtor();
}

void m_void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void m_void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_void_descriptor_;
}

const m_void& m_void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

m_void* m_void::default_instance_ = NULL;

m_void* m_void::New(::google::protobuf::Arena* arena) const {
  m_void* n = new m_void;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void m_void::Clear() {
}

bool m_void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.m_void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:chord.m_void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.m_void)
  return false;
#undef DO_
}

void m_void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.m_void)
  // @@protoc_insertion_point(serialize_end:chord.m_void)
}

::google::protobuf::uint8* m_void::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.m_void)
  // @@protoc_insertion_point(serialize_to_array_end:chord.m_void)
  return target;
}

int m_void::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_void::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const m_void* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const m_void>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_void::MergeFrom(const m_void& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void m_void::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_void::CopyFrom(const m_void& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_void::IsInitialized() const {

  return true;
}

void m_void::Swap(m_void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void m_void::InternalSwap(m_void* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata m_void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_void_descriptor_;
  metadata.reflection = m_void_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// m_void

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int m_int::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

m_int::m_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.m_int)
}

void m_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

m_int::m_int(const m_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chord.m_int)
}

void m_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
}

m_int::~m_int() {
  // @@protoc_insertion_point(destructor:chord.m_int)
  SharedDtor();
}

void m_int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void m_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_int_descriptor_;
}

const m_int& m_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

m_int* m_int::default_instance_ = NULL;

m_int* m_int::New(::google::protobuf::Arena* arena) const {
  m_int* n = new m_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void m_int::Clear() {
  id_ = GOOGLE_LONGLONG(0);
}

bool m_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.m_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.m_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.m_int)
  return false;
#undef DO_
}

void m_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.m_int)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chord.m_int)
}

::google::protobuf::uint8* m_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.m_int)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chord.m_int)
  return target;
}

int m_int::ByteSize() const {
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const m_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const m_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_int::MergeFrom(const m_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void m_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_int::CopyFrom(const m_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_int::IsInitialized() const {

  return true;
}

void m_int::Swap(m_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void m_int::InternalSwap(m_int* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata m_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_int_descriptor_;
  metadata.reflection = m_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// m_int

// optional int64 id = 1;
void m_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 m_int::id() const {
  // @@protoc_insertion_point(field_get:chord.m_int.id)
  return id_;
}
 void m_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chord.m_int.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int m_node_t::kHostnameFieldNumber;
const int m_node_t::kIdFieldNumber;
const int m_node_t::kPortnoFieldNumber;
const int m_node_t::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

m_node_t::m_node_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.m_node_t)
}

void m_node_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

m_node_t::m_node_t(const m_node_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chord.m_node_t)
}

void m_node_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  portno_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

m_node_t::~m_node_t() {
  // @@protoc_insertion_point(destructor:chord.m_node_t)
  SharedDtor();
}

void m_node_t::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void m_node_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_node_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_node_t_descriptor_;
}

const m_node_t& m_node_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

m_node_t* m_node_t::default_instance_ = NULL;

m_node_t* m_node_t::New(::google::protobuf::Arena* arena) const {
  m_node_t* n = new m_node_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void m_node_t::Clear() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  portno_ = 0;
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool m_node_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.m_node_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.m_node_t.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portno;
        break;
      }

      // optional int32 portno = 3;
      case 3: {
        if (tag == 24) {
         parse_portno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 4;
      case 4: {
        if (tag == 34) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.m_node_t.machine_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.m_node_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.m_node_t)
  return false;
#undef DO_
}

void m_node_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.m_node_t)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.m_node_t.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->portno(), output);
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.m_node_t.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chord.m_node_t)
}

::google::protobuf::uint8* m_node_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.m_node_t)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.m_node_t.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->portno(), target);
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.m_node_t.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chord.m_node_t)
  return target;
}

int m_node_t::ByteSize() const {
  int total_size = 0;

  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portno());
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_node_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const m_node_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const m_node_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_node_t::MergeFrom(const m_node_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.portno() != 0) {
    set_portno(from.portno());
  }
  if (from.machine_name().size() > 0) {

    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
}

void m_node_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_node_t::CopyFrom(const m_node_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_node_t::IsInitialized() const {

  return true;
}

void m_node_t::Swap(m_node_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void m_node_t::InternalSwap(m_node_t* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(id_, other->id_);
  std::swap(portno_, other->portno_);
  machine_name_.Swap(&other->machine_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata m_node_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_node_t_descriptor_;
  metadata.reflection = m_node_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// m_node_t

// optional string hostname = 1;
void m_node_t::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& m_node_t::hostname() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void m_node_t::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chord.m_node_t.hostname)
}
 void m_node_t::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chord.m_node_t.hostname)
}
 void m_node_t::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chord.m_node_t.hostname)
}
 ::std::string* m_node_t::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:chord.m_node_t.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* m_node_t::release_hostname() {
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void m_node_t::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:chord.m_node_t.hostname)
}

// optional int64 id = 2;
void m_node_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 m_node_t::id() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t.id)
  return id_;
}
 void m_node_t::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chord.m_node_t.id)
}

// optional int32 portno = 3;
void m_node_t::clear_portno() {
  portno_ = 0;
}
 ::google::protobuf::int32 m_node_t::portno() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t.portno)
  return portno_;
}
 void m_node_t::set_portno(::google::protobuf::int32 value) {
  
  portno_ = value;
  // @@protoc_insertion_point(field_set:chord.m_node_t.portno)
}

// optional string machine_name = 4;
void m_node_t::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& m_node_t::machine_name() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t.machine_name)
  return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void m_node_t::set_machine_name(const ::std::string& value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chord.m_node_t.machine_name)
}
 void m_node_t::set_machine_name(const char* value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chord.m_node_t.machine_name)
}
 void m_node_t::set_machine_name(const char* value, size_t size) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chord.m_node_t.machine_name)
}
 ::std::string* m_node_t::mutable_machine_name() {
  
  // @@protoc_insertion_point(field_mutable:chord.m_node_t.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* m_node_t::release_machine_name() {
  
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void m_node_t::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    
  } else {
    
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:chord.m_node_t.machine_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int m_node_t_int::kNodeFieldNumber;
const int m_node_t_int::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

m_node_t_int::m_node_t_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.m_node_t_int)
}

void m_node_t_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_ = const_cast< ::chord::m_node_t*>(&::chord::m_node_t::default_instance());
}

m_node_t_int::m_node_t_int(const m_node_t_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chord.m_node_t_int)
}

void m_node_t_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

m_node_t_int::~m_node_t_int() {
  // @@protoc_insertion_point(destructor:chord.m_node_t_int)
  SharedDtor();
}

void m_node_t_int::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void m_node_t_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_node_t_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_node_t_int_descriptor_;
}

const m_node_t_int& m_node_t_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

m_node_t_int* m_node_t_int::default_instance_ = NULL;

m_node_t_int* m_node_t_int::New(::google::protobuf::Arena* arena) const {
  m_node_t_int* n = new m_node_t_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void m_node_t_int::Clear() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool m_node_t_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.m_node_t_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chord.m_node_t node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.m_node_t_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.m_node_t_int)
  return false;
#undef DO_
}

void m_node_t_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.m_node_t_int)
  // optional .chord.m_node_t node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chord.m_node_t_int)
}

::google::protobuf::uint8* m_node_t_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.m_node_t_int)
  // optional .chord.m_node_t node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->node_, target);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chord.m_node_t_int)
  return target;
}

int m_node_t_int::ByteSize() const {
  int total_size = 0;

  // optional .chord.m_node_t node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_node_t_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const m_node_t_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const m_node_t_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_node_t_int::MergeFrom(const m_node_t_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_node()) {
    mutable_node()->::chord::m_node_t::MergeFrom(from.node());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void m_node_t_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_node_t_int::CopyFrom(const m_node_t_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_node_t_int::IsInitialized() const {

  return true;
}

void m_node_t_int::Swap(m_node_t_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void m_node_t_int::InternalSwap(m_node_t_int* other) {
  std::swap(node_, other->node_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata m_node_t_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_node_t_int_descriptor_;
  metadata.reflection = m_node_t_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// m_node_t_int

// optional .chord.m_node_t node = 1;
bool m_node_t_int::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void m_node_t_int::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::chord::m_node_t& m_node_t_int::node() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t_int.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::chord::m_node_t* m_node_t_int::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::chord::m_node_t;
  }
  // @@protoc_insertion_point(field_mutable:chord.m_node_t_int.node)
  return node_;
}
::chord::m_node_t* m_node_t_int::release_node() {
  
  ::chord::m_node_t* temp = node_;
  node_ = NULL;
  return temp;
}
void m_node_t_int::set_allocated_node(::chord::m_node_t* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chord.m_node_t_int.node)
}

// optional int64 id = 2;
void m_node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 m_node_t_int::id() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t_int.id)
  return id_;
}
 void m_node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chord.m_node_t_int.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int m_node_t_node_t_int::kNode1FieldNumber;
const int m_node_t_node_t_int::kNode2FieldNumber;
const int m_node_t_node_t_int::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

m_node_t_node_t_int::m_node_t_node_t_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.m_node_t_node_t_int)
}

void m_node_t_node_t_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_1_ = const_cast< ::chord::m_node_t*>(&::chord::m_node_t::default_instance());
  node_2_ = const_cast< ::chord::m_node_t*>(&::chord::m_node_t::default_instance());
}

m_node_t_node_t_int::m_node_t_node_t_int(const m_node_t_node_t_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chord.m_node_t_node_t_int)
}

void m_node_t_node_t_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_1_ = NULL;
  node_2_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

m_node_t_node_t_int::~m_node_t_node_t_int() {
  // @@protoc_insertion_point(destructor:chord.m_node_t_node_t_int)
  SharedDtor();
}

void m_node_t_node_t_int::SharedDtor() {
  if (this != default_instance_) {
    delete node_1_;
    delete node_2_;
  }
}

void m_node_t_node_t_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* m_node_t_node_t_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return m_node_t_node_t_int_descriptor_;
}

const m_node_t_node_t_int& m_node_t_node_t_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

m_node_t_node_t_int* m_node_t_node_t_int::default_instance_ = NULL;

m_node_t_node_t_int* m_node_t_node_t_int::New(::google::protobuf::Arena* arena) const {
  m_node_t_node_t_int* n = new m_node_t_node_t_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void m_node_t_node_t_int::Clear() {
  if (GetArenaNoVirtual() == NULL && node_1_ != NULL) delete node_1_;
  node_1_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_2_ != NULL) delete node_2_;
  node_2_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool m_node_t_node_t_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.m_node_t_node_t_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chord.m_node_t node_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_2;
        break;
      }

      // optional .chord.m_node_t node_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_node_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.m_node_t_node_t_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.m_node_t_node_t_int)
  return false;
#undef DO_
}

void m_node_t_node_t_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.m_node_t_node_t_int)
  // optional .chord.m_node_t node_1 = 1;
  if (this->has_node_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_1_, output);
  }

  // optional .chord.m_node_t node_2 = 2;
  if (this->has_node_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_2_, output);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chord.m_node_t_node_t_int)
}

::google::protobuf::uint8* m_node_t_node_t_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.m_node_t_node_t_int)
  // optional .chord.m_node_t node_1 = 1;
  if (this->has_node_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->node_1_, target);
  }

  // optional .chord.m_node_t node_2 = 2;
  if (this->has_node_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->node_2_, target);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chord.m_node_t_node_t_int)
  return target;
}

int m_node_t_node_t_int::ByteSize() const {
  int total_size = 0;

  // optional .chord.m_node_t node_1 = 1;
  if (this->has_node_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_1_);
  }

  // optional .chord.m_node_t node_2 = 2;
  if (this->has_node_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_2_);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_node_t_node_t_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const m_node_t_node_t_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const m_node_t_node_t_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void m_node_t_node_t_int::MergeFrom(const m_node_t_node_t_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_node_1()) {
    mutable_node_1()->::chord::m_node_t::MergeFrom(from.node_1());
  }
  if (from.has_node_2()) {
    mutable_node_2()->::chord::m_node_t::MergeFrom(from.node_2());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void m_node_t_node_t_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void m_node_t_node_t_int::CopyFrom(const m_node_t_node_t_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_node_t_node_t_int::IsInitialized() const {

  return true;
}

void m_node_t_node_t_int::Swap(m_node_t_node_t_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void m_node_t_node_t_int::InternalSwap(m_node_t_node_t_int* other) {
  std::swap(node_1_, other->node_1_);
  std::swap(node_2_, other->node_2_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata m_node_t_node_t_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = m_node_t_node_t_int_descriptor_;
  metadata.reflection = m_node_t_node_t_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// m_node_t_node_t_int

// optional .chord.m_node_t node_1 = 1;
bool m_node_t_node_t_int::has_node_1() const {
  return !_is_default_instance_ && node_1_ != NULL;
}
void m_node_t_node_t_int::clear_node_1() {
  if (GetArenaNoVirtual() == NULL && node_1_ != NULL) delete node_1_;
  node_1_ = NULL;
}
const ::chord::m_node_t& m_node_t_node_t_int::node_1() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t_node_t_int.node_1)
  return node_1_ != NULL ? *node_1_ : *default_instance_->node_1_;
}
::chord::m_node_t* m_node_t_node_t_int::mutable_node_1() {
  
  if (node_1_ == NULL) {
    node_1_ = new ::chord::m_node_t;
  }
  // @@protoc_insertion_point(field_mutable:chord.m_node_t_node_t_int.node_1)
  return node_1_;
}
::chord::m_node_t* m_node_t_node_t_int::release_node_1() {
  
  ::chord::m_node_t* temp = node_1_;
  node_1_ = NULL;
  return temp;
}
void m_node_t_node_t_int::set_allocated_node_1(::chord::m_node_t* node_1) {
  delete node_1_;
  node_1_ = node_1;
  if (node_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chord.m_node_t_node_t_int.node_1)
}

// optional .chord.m_node_t node_2 = 2;
bool m_node_t_node_t_int::has_node_2() const {
  return !_is_default_instance_ && node_2_ != NULL;
}
void m_node_t_node_t_int::clear_node_2() {
  if (GetArenaNoVirtual() == NULL && node_2_ != NULL) delete node_2_;
  node_2_ = NULL;
}
const ::chord::m_node_t& m_node_t_node_t_int::node_2() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t_node_t_int.node_2)
  return node_2_ != NULL ? *node_2_ : *default_instance_->node_2_;
}
::chord::m_node_t* m_node_t_node_t_int::mutable_node_2() {
  
  if (node_2_ == NULL) {
    node_2_ = new ::chord::m_node_t;
  }
  // @@protoc_insertion_point(field_mutable:chord.m_node_t_node_t_int.node_2)
  return node_2_;
}
::chord::m_node_t* m_node_t_node_t_int::release_node_2() {
  
  ::chord::m_node_t* temp = node_2_;
  node_2_ = NULL;
  return temp;
}
void m_node_t_node_t_int::set_allocated_node_2(::chord::m_node_t* node_2) {
  delete node_2_;
  node_2_ = node_2;
  if (node_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chord.m_node_t_node_t_int.node_2)
}

// optional int64 id = 3;
void m_node_t_node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 m_node_t_node_t_int::id() const {
  // @@protoc_insertion_point(field_get:chord.m_node_t_node_t_int.id)
  return id_;
}
 void m_node_t_node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chord.m_node_t_node_t_int.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chord

// @@protoc_insertion_point(global_scope)
