// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace routeguide {

namespace {

const ::google::protobuf::Descriptor* void_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  void_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_dual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_dual_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_int_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_node_t_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_node_t_int_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_dual_node_t_int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_dual_node_t_int_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chord_2eproto() {
  protobuf_AddDesc_chord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chord.proto");
  GOOGLE_CHECK(file != NULL);
  void_descriptor_ = file->message_type(0);
  static const int void_offsets_[1] = {
  };
  void_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      void_descriptor_,
      void::default_instance_,
      void_offsets_,
      -1,
      -1,
      -1,
      sizeof(void),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(void, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(void, _is_default_instance_));
  node_t_descriptor_ = file->message_type(1);
  static const int node_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, portno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, machine_name_),
  };
  node_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_descriptor_,
      node_t::default_instance_,
      node_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(node_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, _is_default_instance_));
  node_t_dual_descriptor_ = file->message_type(2);
  static const int node_t_dual_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual, second_),
  };
  node_t_dual_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_dual_descriptor_,
      node_t_dual::default_instance_,
      node_t_dual_offsets_,
      -1,
      -1,
      -1,
      sizeof(node_t_dual),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual, _is_default_instance_));
  node_t_int_descriptor_ = file->message_type(3);
  static const int node_t_int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_int, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_int, id_),
  };
  node_t_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_int_descriptor_,
      node_t_int::default_instance_,
      node_t_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(node_t_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_int, _is_default_instance_));
  node_t_node_t_int_descriptor_ = file->message_type(4);
  static const int node_t_node_t_int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_node_t_int, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_node_t_int, entry_),
  };
  node_t_node_t_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_node_t_int_descriptor_,
      node_t_node_t_int::default_instance_,
      node_t_node_t_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(node_t_node_t_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_node_t_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_node_t_int, _is_default_instance_));
  node_t_dual_node_t_int_descriptor_ = file->message_type(5);
  static const int node_t_dual_node_t_int_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, dest_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, node_param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, node_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, id_),
  };
  node_t_dual_node_t_int_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_dual_node_t_int_descriptor_,
      node_t_dual_node_t_int::default_instance_,
      node_t_dual_node_t_int_offsets_,
      -1,
      -1,
      -1,
      sizeof(node_t_dual_node_t_int),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t_dual_node_t_int, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      void_descriptor_, &void::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_descriptor_, &node_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_dual_descriptor_, &node_t_dual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_int_descriptor_, &node_t_int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_node_t_int_descriptor_, &node_t_node_t_int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_dual_node_t_int_descriptor_, &node_t_dual_node_t_int::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chord_2eproto() {
  delete void::default_instance_;
  delete void_reflection_;
  delete node_t::default_instance_;
  delete node_t_reflection_;
  delete node_t_dual::default_instance_;
  delete node_t_dual_reflection_;
  delete node_t_int::default_instance_;
  delete node_t_int_reflection_;
  delete node_t_node_t_int::default_instance_;
  delete node_t_node_t_int_reflection_;
  delete node_t_dual_node_t_int::default_instance_;
  delete node_t_dual_node_t_int_reflection_;
}

void protobuf_AddDesc_chord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013chord.proto\022\nrouteguide\"\006\n\004void\"L\n\006nod"
    "e_t\022\020\n\010hostname\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\016\n\006por"
    "tno\030\003 \001(\005\022\024\n\014machine_name\030\004 \001(\t\"T\n\013node_"
    "t_dual\022!\n\005first\030\001 \001(\0132\022.routeguide.node_"
    "t\022\"\n\006second\030\002 \001(\0132\022.routeguide.node_t\":\n"
    "\nnode_t_int\022 \n\004node\030\001 \001(\0132\022.routeguide.n"
    "ode_t\022\n\n\002id\030\002 \001(\003\"\\\n\021node_t_node_t_int\022 "
    "\n\004node\030\001 \001(\0132\022.routeguide.node_t\022%\n\005entr"
    "y\030\002 \001(\0132\026.routeguide.node_t_int\"\235\001\n\026node"
    "_t_dual_node_t_int\022%\n\tdest_node\030\001 \001(\0132\022."
    "routeguide.node_t\022\'\n\013node_param1\030\002 \001(\0132\022"
    ".routeguide.node_t\022\'\n\013node_param2\030\003 \001(\0132"
    "\022.routeguide.node_t\022\n\n\002id\030\004 \001(\0032\210\004\n\nRout"
    "eGuide\022@\n\024getRemotePredecessor\022\022.routegu"
    "ide.node_t\032\022.routeguide.node_t\"\000\022C\n\024setR"
    "emotePredecessor\022\027.routeguide.node_t_dua"
    "l\032\020.routeguide.void\"\000\022>\n\022getRemoteSucces"
    "sor\022\022.routeguide.node_t\032\022.routeguide.nod"
    "e_t\"\000\022C\n\023findRemoteSuccessor\022\026.routeguid"
    "e.node_t_int\032\022.routeguide.node_t\"\000\022P\n fi"
    "ndRemoteClosestPrecedingFinger\022\026.routegu"
    "ide.node_t_int\032\022.routeguide.node_t\"\000\022N\n\027"
    "updateRemoteFingerTable\022\035.routeguide.nod"
    "e_t_node_t_int\032\022.routeguide.node_t\"\000\022L\n\020"
    "removeRemoteNode\022\".routeguide.node_t_dua"
    "l_node_t_int\032\022.routeguide.node_t\"\000B6\n\033io"
    ".grpc.examples.routeguideB\017RouteGuidePro"
    "toP\001\242\002\003RTGb\006proto3", 1098);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chord.proto", &protobuf_RegisterTypes);
  void::default_instance_ = new void();
  node_t::default_instance_ = new node_t();
  node_t_dual::default_instance_ = new node_t_dual();
  node_t_int::default_instance_ = new node_t_int();
  node_t_node_t_int::default_instance_ = new node_t_node_t_int();
  node_t_dual_node_t_int::default_instance_ = new node_t_dual_node_t_int();
  void::default_instance_->InitAsDefaultInstance();
  node_t::default_instance_->InitAsDefaultInstance();
  node_t_dual::default_instance_->InitAsDefaultInstance();
  node_t_int::default_instance_->InitAsDefaultInstance();
  node_t_node_t_int::default_instance_->InitAsDefaultInstance();
  node_t_dual_node_t_int::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chord_2eproto {
  StaticDescriptorInitializer_chord_2eproto() {
    protobuf_AddDesc_chord_2eproto();
  }
} static_descriptor_initializer_chord_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

void::void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.void)
}

void void::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

void::void(const void& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.void)
}

void void::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

void::~void() {
  // @@protoc_insertion_point(destructor:routeguide.void)
  SharedDtor();
}

void void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return void_descriptor_;
}

const void& void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

void* void::default_instance_ = NULL;

void* void::New(::google::protobuf::Arena* arena) const {
  void* n = new void;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void void::Clear() {
}

bool void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.void)
  return false;
#undef DO_
}

void void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.void)
  // @@protoc_insertion_point(serialize_end:routeguide.void)
}

::google::protobuf::uint8* void::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.void)
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.void)
  return target;
}

int void::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void void::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const void* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const void>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void void::MergeFrom(const void& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void void::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void void::CopyFrom(const void& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool void::IsInitialized() const {

  return true;
}

void void::Swap(void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void void::InternalSwap(void* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = void_descriptor_;
  metadata.reflection = void_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// void

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t::kHostnameFieldNumber;
const int node_t::kIdFieldNumber;
const int node_t::kPortnoFieldNumber;
const int node_t::kMachineNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t::node_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.node_t)
}

void node_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

node_t::node_t(const node_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.node_t)
}

void node_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  portno_ = 0;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

node_t::~node_t() {
  // @@protoc_insertion_point(destructor:routeguide.node_t)
  SharedDtor();
}

void node_t::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void node_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_descriptor_;
}

const node_t& node_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

node_t* node_t::default_instance_ = NULL;

node_t* node_t::New(::google::protobuf::Arena* arena) const {
  node_t* n = new node_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void node_t::Clear() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  portno_ = 0;
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool node_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.node_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "routeguide.node_t.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portno;
        break;
      }

      // optional int32 portno = 3;
      case 3: {
        if (tag == 24) {
         parse_portno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 4;
      case 4: {
        if (tag == 34) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "routeguide.node_t.machine_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.node_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.node_t)
  return false;
#undef DO_
}

void node_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.node_t)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "routeguide.node_t.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->portno(), output);
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "routeguide.node_t.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:routeguide.node_t)
}

::google::protobuf::uint8* node_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.node_t)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "routeguide.node_t.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->portno(), target);
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "routeguide.node_t.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:routeguide.node_t)
  return target;
}

int node_t::ByteSize() const {
  int total_size = 0;

  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int32 portno = 3;
  if (this->portno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->portno());
  }

  // optional string machine_name = 4;
  if (this->machine_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t::MergeFrom(const node_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.portno() != 0) {
    set_portno(from.portno());
  }
  if (from.machine_name().size() > 0) {

    machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
  }
}

void node_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t::CopyFrom(const node_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t::IsInitialized() const {

  return true;
}

void node_t::Swap(node_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_t::InternalSwap(node_t* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(id_, other->id_);
  std::swap(portno_, other->portno_);
  machine_name_.Swap(&other->machine_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_descriptor_;
  metadata.reflection = node_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t

// optional string hostname = 1;
void node_t::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& node_t::hostname() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void node_t::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.node_t.hostname)
}
 void node_t::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.node_t.hostname)
}
 void node_t::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.node_t.hostname)
}
 ::std::string* node_t::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.node_t.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* node_t::release_hostname() {
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void node_t::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t.hostname)
}

// optional int64 id = 2;
void node_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 node_t::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.id)
  return id_;
}
 void node_t::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t.id)
}

// optional int32 portno = 3;
void node_t::clear_portno() {
  portno_ = 0;
}
 ::google::protobuf::int32 node_t::portno() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.portno)
  return portno_;
}
 void node_t::set_portno(::google::protobuf::int32 value) {
  
  portno_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t.portno)
}

// optional string machine_name = 4;
void node_t::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& node_t::machine_name() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t.machine_name)
  return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void node_t::set_machine_name(const ::std::string& value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:routeguide.node_t.machine_name)
}
 void node_t::set_machine_name(const char* value) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.node_t.machine_name)
}
 void node_t::set_machine_name(const char* value, size_t size) {
  
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.node_t.machine_name)
}
 ::std::string* node_t::mutable_machine_name() {
  
  // @@protoc_insertion_point(field_mutable:routeguide.node_t.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* node_t::release_machine_name() {
  
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void node_t::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    
  } else {
    
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t.machine_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t_dual::kFirstFieldNumber;
const int node_t_dual::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t_dual::node_t_dual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.node_t_dual)
}

void node_t_dual::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  first_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
  second_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
}

node_t_dual::node_t_dual(const node_t_dual& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.node_t_dual)
}

void node_t_dual::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  first_ = NULL;
  second_ = NULL;
}

node_t_dual::~node_t_dual() {
  // @@protoc_insertion_point(destructor:routeguide.node_t_dual)
  SharedDtor();
}

void node_t_dual::SharedDtor() {
  if (this != default_instance_) {
    delete first_;
    delete second_;
  }
}

void node_t_dual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t_dual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_dual_descriptor_;
}

const node_t_dual& node_t_dual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

node_t_dual* node_t_dual::default_instance_ = NULL;

node_t_dual* node_t_dual::New(::google::protobuf::Arena* arena) const {
  node_t_dual* n = new node_t_dual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void node_t_dual::Clear() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}

bool node_t_dual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.node_t_dual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .routeguide.node_t first = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_second;
        break;
      }

      // optional .routeguide.node_t second = 2;
      case 2: {
        if (tag == 18) {
         parse_second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.node_t_dual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.node_t_dual)
  return false;
#undef DO_
}

void node_t_dual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.node_t_dual)
  // optional .routeguide.node_t first = 1;
  if (this->has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->first_, output);
  }

  // optional .routeguide.node_t second = 2;
  if (this->has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->second_, output);
  }

  // @@protoc_insertion_point(serialize_end:routeguide.node_t_dual)
}

::google::protobuf::uint8* node_t_dual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.node_t_dual)
  // optional .routeguide.node_t first = 1;
  if (this->has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->first_, target);
  }

  // optional .routeguide.node_t second = 2;
  if (this->has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->second_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:routeguide.node_t_dual)
  return target;
}

int node_t_dual::ByteSize() const {
  int total_size = 0;

  // optional .routeguide.node_t first = 1;
  if (this->has_first()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->first_);
  }

  // optional .routeguide.node_t second = 2;
  if (this->has_second()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->second_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t_dual::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t_dual* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t_dual>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t_dual::MergeFrom(const node_t_dual& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_first()) {
    mutable_first()->::routeguide::node_t::MergeFrom(from.first());
  }
  if (from.has_second()) {
    mutable_second()->::routeguide::node_t::MergeFrom(from.second());
  }
}

void node_t_dual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t_dual::CopyFrom(const node_t_dual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t_dual::IsInitialized() const {

  return true;
}

void node_t_dual::Swap(node_t_dual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_t_dual::InternalSwap(node_t_dual* other) {
  std::swap(first_, other->first_);
  std::swap(second_, other->second_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t_dual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_dual_descriptor_;
  metadata.reflection = node_t_dual_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t_dual

// optional .routeguide.node_t first = 1;
bool node_t_dual::has_first() const {
  return !_is_default_instance_ && first_ != NULL;
}
void node_t_dual::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
const ::routeguide::node_t& node_t_dual::first() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual.first)
  return first_ != NULL ? *first_ : *default_instance_->first_;
}
::routeguide::node_t* node_t_dual::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual.first)
  return first_;
}
::routeguide::node_t* node_t_dual::release_first() {
  
  ::routeguide::node_t* temp = first_;
  first_ = NULL;
  return temp;
}
void node_t_dual::set_allocated_first(::routeguide::node_t* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual.first)
}

// optional .routeguide.node_t second = 2;
bool node_t_dual::has_second() const {
  return !_is_default_instance_ && second_ != NULL;
}
void node_t_dual::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
const ::routeguide::node_t& node_t_dual::second() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual.second)
  return second_ != NULL ? *second_ : *default_instance_->second_;
}
::routeguide::node_t* node_t_dual::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual.second)
  return second_;
}
::routeguide::node_t* node_t_dual::release_second() {
  
  ::routeguide::node_t* temp = second_;
  second_ = NULL;
  return temp;
}
void node_t_dual::set_allocated_second(::routeguide::node_t* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual.second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t_int::kNodeFieldNumber;
const int node_t_int::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t_int::node_t_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.node_t_int)
}

void node_t_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
}

node_t_int::node_t_int(const node_t_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.node_t_int)
}

void node_t_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

node_t_int::~node_t_int() {
  // @@protoc_insertion_point(destructor:routeguide.node_t_int)
  SharedDtor();
}

void node_t_int::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void node_t_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_int_descriptor_;
}

const node_t_int& node_t_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

node_t_int* node_t_int::default_instance_ = NULL;

node_t_int* node_t_int::New(::google::protobuf::Arena* arena) const {
  node_t_int* n = new node_t_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void node_t_int::Clear() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool node_t_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.node_t_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .routeguide.node_t node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.node_t_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.node_t_int)
  return false;
#undef DO_
}

void node_t_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.node_t_int)
  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:routeguide.node_t_int)
}

::google::protobuf::uint8* node_t_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.node_t_int)
  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->node_, target);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:routeguide.node_t_int)
  return target;
}

int node_t_int::ByteSize() const {
  int total_size = 0;

  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // optional int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t_int::MergeFrom(const node_t_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_node()) {
    mutable_node()->::routeguide::node_t::MergeFrom(from.node());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void node_t_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t_int::CopyFrom(const node_t_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t_int::IsInitialized() const {

  return true;
}

void node_t_int::Swap(node_t_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_t_int::InternalSwap(node_t_int* other) {
  std::swap(node_, other->node_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_int_descriptor_;
  metadata.reflection = node_t_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t_int

// optional .routeguide.node_t node = 1;
bool node_t_int::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void node_t_int::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::routeguide::node_t& node_t_int::node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_int.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::routeguide::node_t* node_t_int::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_int.node)
  return node_;
}
::routeguide::node_t* node_t_int::release_node() {
  
  ::routeguide::node_t* temp = node_;
  node_ = NULL;
  return temp;
}
void node_t_int::set_allocated_node(::routeguide::node_t* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_int.node)
}

// optional int64 id = 2;
void node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 node_t_int::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_int.id)
  return id_;
}
 void node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t_int.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t_node_t_int::kNodeFieldNumber;
const int node_t_node_t_int::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t_node_t_int::node_t_node_t_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.node_t_node_t_int)
}

void node_t_node_t_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
  entry_ = const_cast< ::routeguide::node_t_int*>(&::routeguide::node_t_int::default_instance());
}

node_t_node_t_int::node_t_node_t_int(const node_t_node_t_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.node_t_node_t_int)
}

void node_t_node_t_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_ = NULL;
  entry_ = NULL;
}

node_t_node_t_int::~node_t_node_t_int() {
  // @@protoc_insertion_point(destructor:routeguide.node_t_node_t_int)
  SharedDtor();
}

void node_t_node_t_int::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
    delete entry_;
  }
}

void node_t_node_t_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t_node_t_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_node_t_int_descriptor_;
}

const node_t_node_t_int& node_t_node_t_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

node_t_node_t_int* node_t_node_t_int::default_instance_ = NULL;

node_t_node_t_int* node_t_node_t_int::New(::google::protobuf::Arena* arena) const {
  node_t_node_t_int* n = new node_t_node_t_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void node_t_node_t_int::Clear() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) delete entry_;
  entry_ = NULL;
}

bool node_t_node_t_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.node_t_node_t_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .routeguide.node_t node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // optional .routeguide.node_t_int entry = 2;
      case 2: {
        if (tag == 18) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.node_t_node_t_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.node_t_node_t_int)
  return false;
#undef DO_
}

void node_t_node_t_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.node_t_node_t_int)
  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // optional .routeguide.node_t_int entry = 2;
  if (this->has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entry_, output);
  }

  // @@protoc_insertion_point(serialize_end:routeguide.node_t_node_t_int)
}

::google::protobuf::uint8* node_t_node_t_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.node_t_node_t_int)
  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->node_, target);
  }

  // optional .routeguide.node_t_int entry = 2;
  if (this->has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->entry_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:routeguide.node_t_node_t_int)
  return target;
}

int node_t_node_t_int::ByteSize() const {
  int total_size = 0;

  // optional .routeguide.node_t node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // optional .routeguide.node_t_int entry = 2;
  if (this->has_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t_node_t_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t_node_t_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t_node_t_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t_node_t_int::MergeFrom(const node_t_node_t_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_node()) {
    mutable_node()->::routeguide::node_t::MergeFrom(from.node());
  }
  if (from.has_entry()) {
    mutable_entry()->::routeguide::node_t_int::MergeFrom(from.entry());
  }
}

void node_t_node_t_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t_node_t_int::CopyFrom(const node_t_node_t_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t_node_t_int::IsInitialized() const {

  return true;
}

void node_t_node_t_int::Swap(node_t_node_t_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_t_node_t_int::InternalSwap(node_t_node_t_int* other) {
  std::swap(node_, other->node_);
  std::swap(entry_, other->entry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t_node_t_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_node_t_int_descriptor_;
  metadata.reflection = node_t_node_t_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t_node_t_int

// optional .routeguide.node_t node = 1;
bool node_t_node_t_int::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void node_t_node_t_int::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::routeguide::node_t& node_t_node_t_int::node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_node_t_int.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::routeguide::node_t* node_t_node_t_int::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_node_t_int.node)
  return node_;
}
::routeguide::node_t* node_t_node_t_int::release_node() {
  
  ::routeguide::node_t* temp = node_;
  node_ = NULL;
  return temp;
}
void node_t_node_t_int::set_allocated_node(::routeguide::node_t* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_node_t_int.node)
}

// optional .routeguide.node_t_int entry = 2;
bool node_t_node_t_int::has_entry() const {
  return !_is_default_instance_ && entry_ != NULL;
}
void node_t_node_t_int::clear_entry() {
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) delete entry_;
  entry_ = NULL;
}
const ::routeguide::node_t_int& node_t_node_t_int::entry() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_node_t_int.entry)
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
::routeguide::node_t_int* node_t_node_t_int::mutable_entry() {
  
  if (entry_ == NULL) {
    entry_ = new ::routeguide::node_t_int;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_node_t_int.entry)
  return entry_;
}
::routeguide::node_t_int* node_t_node_t_int::release_entry() {
  
  ::routeguide::node_t_int* temp = entry_;
  entry_ = NULL;
  return temp;
}
void node_t_node_t_int::set_allocated_entry(::routeguide::node_t_int* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_node_t_int.entry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t_dual_node_t_int::kDestNodeFieldNumber;
const int node_t_dual_node_t_int::kNodeParam1FieldNumber;
const int node_t_dual_node_t_int::kNodeParam2FieldNumber;
const int node_t_dual_node_t_int::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t_dual_node_t_int::node_t_dual_node_t_int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.node_t_dual_node_t_int)
}

void node_t_dual_node_t_int::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  dest_node_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
  node_param1_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
  node_param2_ = const_cast< ::routeguide::node_t*>(&::routeguide::node_t::default_instance());
}

node_t_dual_node_t_int::node_t_dual_node_t_int(const node_t_dual_node_t_int& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:routeguide.node_t_dual_node_t_int)
}

void node_t_dual_node_t_int::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dest_node_ = NULL;
  node_param1_ = NULL;
  node_param2_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

node_t_dual_node_t_int::~node_t_dual_node_t_int() {
  // @@protoc_insertion_point(destructor:routeguide.node_t_dual_node_t_int)
  SharedDtor();
}

void node_t_dual_node_t_int::SharedDtor() {
  if (this != default_instance_) {
    delete dest_node_;
    delete node_param1_;
    delete node_param2_;
  }
}

void node_t_dual_node_t_int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t_dual_node_t_int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_dual_node_t_int_descriptor_;
}

const node_t_dual_node_t_int& node_t_dual_node_t_int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chord_2eproto();
  return *default_instance_;
}

node_t_dual_node_t_int* node_t_dual_node_t_int::default_instance_ = NULL;

node_t_dual_node_t_int* node_t_dual_node_t_int::New(::google::protobuf::Arena* arena) const {
  node_t_dual_node_t_int* n = new node_t_dual_node_t_int;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void node_t_dual_node_t_int::Clear() {
  if (GetArenaNoVirtual() == NULL && dest_node_ != NULL) delete dest_node_;
  dest_node_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_param1_ != NULL) delete node_param1_;
  node_param1_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_param2_ != NULL) delete node_param2_;
  node_param2_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
}

bool node_t_dual_node_t_int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:routeguide.node_t_dual_node_t_int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .routeguide.node_t dest_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_param1;
        break;
      }

      // optional .routeguide.node_t node_param1 = 2;
      case 2: {
        if (tag == 18) {
         parse_node_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_param1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_param2;
        break;
      }

      // optional .routeguide.node_t node_param2 = 3;
      case 3: {
        if (tag == 26) {
         parse_node_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_param2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:routeguide.node_t_dual_node_t_int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:routeguide.node_t_dual_node_t_int)
  return false;
#undef DO_
}

void node_t_dual_node_t_int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:routeguide.node_t_dual_node_t_int)
  // optional .routeguide.node_t dest_node = 1;
  if (this->has_dest_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dest_node_, output);
  }

  // optional .routeguide.node_t node_param1 = 2;
  if (this->has_node_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_param1_, output);
  }

  // optional .routeguide.node_t node_param2 = 3;
  if (this->has_node_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->node_param2_, output);
  }

  // optional int64 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:routeguide.node_t_dual_node_t_int)
}

::google::protobuf::uint8* node_t_dual_node_t_int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.node_t_dual_node_t_int)
  // optional .routeguide.node_t dest_node = 1;
  if (this->has_dest_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->dest_node_, target);
  }

  // optional .routeguide.node_t node_param1 = 2;
  if (this->has_node_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->node_param1_, target);
  }

  // optional .routeguide.node_t node_param2 = 3;
  if (this->has_node_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->node_param2_, target);
  }

  // optional int64 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:routeguide.node_t_dual_node_t_int)
  return target;
}

int node_t_dual_node_t_int::ByteSize() const {
  int total_size = 0;

  // optional .routeguide.node_t dest_node = 1;
  if (this->has_dest_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_node_);
  }

  // optional .routeguide.node_t node_param1 = 2;
  if (this->has_node_param1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_param1_);
  }

  // optional .routeguide.node_t node_param2 = 3;
  if (this->has_node_param2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_param2_);
  }

  // optional int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t_dual_node_t_int::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t_dual_node_t_int* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t_dual_node_t_int>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t_dual_node_t_int::MergeFrom(const node_t_dual_node_t_int& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_dest_node()) {
    mutable_dest_node()->::routeguide::node_t::MergeFrom(from.dest_node());
  }
  if (from.has_node_param1()) {
    mutable_node_param1()->::routeguide::node_t::MergeFrom(from.node_param1());
  }
  if (from.has_node_param2()) {
    mutable_node_param2()->::routeguide::node_t::MergeFrom(from.node_param2());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void node_t_dual_node_t_int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t_dual_node_t_int::CopyFrom(const node_t_dual_node_t_int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t_dual_node_t_int::IsInitialized() const {

  return true;
}

void node_t_dual_node_t_int::Swap(node_t_dual_node_t_int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_t_dual_node_t_int::InternalSwap(node_t_dual_node_t_int* other) {
  std::swap(dest_node_, other->dest_node_);
  std::swap(node_param1_, other->node_param1_);
  std::swap(node_param2_, other->node_param2_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t_dual_node_t_int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_dual_node_t_int_descriptor_;
  metadata.reflection = node_t_dual_node_t_int_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t_dual_node_t_int

// optional .routeguide.node_t dest_node = 1;
bool node_t_dual_node_t_int::has_dest_node() const {
  return !_is_default_instance_ && dest_node_ != NULL;
}
void node_t_dual_node_t_int::clear_dest_node() {
  if (GetArenaNoVirtual() == NULL && dest_node_ != NULL) delete dest_node_;
  dest_node_ = NULL;
}
const ::routeguide::node_t& node_t_dual_node_t_int::dest_node() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.dest_node)
  return dest_node_ != NULL ? *dest_node_ : *default_instance_->dest_node_;
}
::routeguide::node_t* node_t_dual_node_t_int::mutable_dest_node() {
  
  if (dest_node_ == NULL) {
    dest_node_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.dest_node)
  return dest_node_;
}
::routeguide::node_t* node_t_dual_node_t_int::release_dest_node() {
  
  ::routeguide::node_t* temp = dest_node_;
  dest_node_ = NULL;
  return temp;
}
void node_t_dual_node_t_int::set_allocated_dest_node(::routeguide::node_t* dest_node) {
  delete dest_node_;
  dest_node_ = dest_node;
  if (dest_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.dest_node)
}

// optional .routeguide.node_t node_param1 = 2;
bool node_t_dual_node_t_int::has_node_param1() const {
  return !_is_default_instance_ && node_param1_ != NULL;
}
void node_t_dual_node_t_int::clear_node_param1() {
  if (GetArenaNoVirtual() == NULL && node_param1_ != NULL) delete node_param1_;
  node_param1_ = NULL;
}
const ::routeguide::node_t& node_t_dual_node_t_int::node_param1() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.node_param1)
  return node_param1_ != NULL ? *node_param1_ : *default_instance_->node_param1_;
}
::routeguide::node_t* node_t_dual_node_t_int::mutable_node_param1() {
  
  if (node_param1_ == NULL) {
    node_param1_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.node_param1)
  return node_param1_;
}
::routeguide::node_t* node_t_dual_node_t_int::release_node_param1() {
  
  ::routeguide::node_t* temp = node_param1_;
  node_param1_ = NULL;
  return temp;
}
void node_t_dual_node_t_int::set_allocated_node_param1(::routeguide::node_t* node_param1) {
  delete node_param1_;
  node_param1_ = node_param1;
  if (node_param1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.node_param1)
}

// optional .routeguide.node_t node_param2 = 3;
bool node_t_dual_node_t_int::has_node_param2() const {
  return !_is_default_instance_ && node_param2_ != NULL;
}
void node_t_dual_node_t_int::clear_node_param2() {
  if (GetArenaNoVirtual() == NULL && node_param2_ != NULL) delete node_param2_;
  node_param2_ = NULL;
}
const ::routeguide::node_t& node_t_dual_node_t_int::node_param2() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.node_param2)
  return node_param2_ != NULL ? *node_param2_ : *default_instance_->node_param2_;
}
::routeguide::node_t* node_t_dual_node_t_int::mutable_node_param2() {
  
  if (node_param2_ == NULL) {
    node_param2_ = new ::routeguide::node_t;
  }
  // @@protoc_insertion_point(field_mutable:routeguide.node_t_dual_node_t_int.node_param2)
  return node_param2_;
}
::routeguide::node_t* node_t_dual_node_t_int::release_node_param2() {
  
  ::routeguide::node_t* temp = node_param2_;
  node_param2_ = NULL;
  return temp;
}
void node_t_dual_node_t_int::set_allocated_node_param2(::routeguide::node_t* node_param2) {
  delete node_param2_;
  node_param2_ = node_param2;
  if (node_param2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:routeguide.node_t_dual_node_t_int.node_param2)
}

// optional int64 id = 4;
void node_t_dual_node_t_int::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 node_t_dual_node_t_int::id() const {
  // @@protoc_insertion_point(field_get:routeguide.node_t_dual_node_t_int.id)
  return id_;
}
 void node_t_dual_node_t_int::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:routeguide.node_t_dual_node_t_int.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routeguide

// @@protoc_insertion_point(global_scope)
